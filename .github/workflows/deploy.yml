name: Build and Deploy Go App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Clear Go Module Cache
        run: |
          echo "Attempting to clean Go module cache..."
          go clean -modcache || true
        shell: bash

      - name: Setup Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.23.1'
          cache: false

      - name: Install esbuild
        run: go install github.com/evanw/esbuild/cmd/esbuild@latest

      - name: Build Assets
        run: |
          chmod +x ./build-assets.sh
          ./build-assets.sh

      - name: Build Go Binary
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Building version $VERSION"
          go build -ldflags="-s -w -X main.version=$VERSION" -o yt-downloader ./cmd/server

      - name: Create Release Package
        run: |
          mkdir release
          mv yt-downloader release/
          cp -r web release/
          cp -r locales release/
          mkdir -p release/downloads
          touch release/downloads/.gitkeep

      - name: Package Release for GitHub
        id: package_release
        run: |
          # Package the release directory into a zip file for the GitHub Release.
          zip -r yt-downloader-${{ env.VERSION }}.zip release/
          echo "asset_path=$(pwd)/yt-downloader-${{ env.VERSION }}.zip" >> $GITHUB_OUTPUT

      - name: Create GitHub Tag and Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: "Release ${{ env.VERSION }}"
          generate_release_notes: true
          files: ${{ steps.package_release.outputs.asset_path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "release/"
          target: "~/yt_downloader_latest"
          strip_components: 1

      - name: Deploy new build to server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            APP_ROOT="/var/www/yt-downloader"
            LATEST_STAGING_PATH="$HOME/yt_downloader_latest"
            
            RELEASES_PATH="$APP_ROOT/releases"
            SHARED_PATH="$APP_ROOT/shared"
            
            mkdir -p "$RELEASES_PATH"
            mkdir -p "$SHARED_PATH/downloads"
            
            RELEASE_TIMESTAMP=$(date +%Y%m%d%H%M%S)
            NEW_RELEASE_PATH="$RELEASES_PATH/$RELEASE_TIMESTAMP"
            mkdir -p "$NEW_RELEASE_PATH"
            
            mv "$LATEST_STAGING_PATH"/* "$NEW_RELEASE_PATH/"
            
            rm -rf "$NEW_RELEASE_PATH/downloads"
            
            ln -s "$SHARED_PATH/downloads" "$NEW_RELEASE_PATH/downloads"
            
            ln -sfn "$NEW_RELEASE_PATH" "$APP_ROOT/next_release"
            mv -Tf "$APP_ROOT/next_release" "$APP_ROOT/current"
            
            sudo systemctl restart yt-downloader.service
            
            echo "Cleaning up old releases..."
            ls -dt "$RELEASES_PATH"/* | tail -n +6 | xargs rm -rf -- {} || true
            
            echo "Deployment successful! Current version points to: $(readlink -f "$APP_ROOT/current")"
