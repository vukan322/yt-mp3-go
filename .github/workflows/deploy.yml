name: Build and Deploy Go App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Clear Go Module Cache (if needed)
        run: |
          echo "Attempting to clean Go module cache..."
          go clean -modcache || true
        shell: bash

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build Go Binary
        run: |
          VERSION="1.0.${{ github.run_number }}"
          echo "Building version $VERSION"
          go build -ldflags="-s -w -X main.version=$VERSION" -o yt-downloader ./cmd/server

      - name: Create Release Package
        run: |
          mkdir release
          mv yt-downloader release/
          cp -r web release/
          cp -r locales release/
          mkdir -p release/downloads
          touch release/downloads/.gitkeep

      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "release/"
          target: "~/yt_downloader_latest"
          strip_components: 1

      - name: Deploy new build to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            APP_ROOT="/var/www/yt-downloader"
            CURRENT_SYMLINK="$APP_ROOT/current"
            RELEASES_PATH="$APP_ROOT/releases"
            LATEST_STAGING_PATH="$HOME/yt_downloader_latest" 

            echo "--- Debugging Deployment ---"
            echo "Current user: $(whoami)"
            echo "Home directory: $HOME"
            echo "APP_ROOT: $APP_ROOT"
            echo "LATEST_STAGING_PATH: $LATEST_STAGING_PATH"
            echo "RELEASES_PATH: $RELEASES_PATH"

            mkdir -p $RELEASES_PATH

            RELEASE_TIMESTAMP=$(date +%Y%m%d%H%M%S)
            NEW_RELEASE_PATH="$RELEASES_PATH/$RELEASE_TIMESTAMP"

            echo "Creating new release directory: $NEW_RELEASE_PATH"
            mkdir -p $NEW_RELEASE_PATH

            echo "Contents of LATEST_STAGING_PATH ($LATEST_STAGING_PATH) BEFORE move:"
            ls -al "$LATEST_STAGING_PATH/" || true

            echo "Moving staged files to new release directory ($NEW_RELEASE_PATH)..."
            mv -v "$LATEST_STAGING_PATH"/* "$NEW_RELEASE_PATH/"

            echo "Contents of LATEST_STAGING_PATH ($LATEST_STAGING_PATH) AFTER move:"
            ls -al "$LATEST_STAGING_PATH/" || true

            echo "Contents of NEW_RELEASE_PATH ($NEW_RELEASE_PATH) AFTER move:"
            ls -al "$NEW_RELEASE_PATH/" || true

            echo "Updating 'current' symlink to new release..."
            ln -sfn "$NEW_RELEASE_PATH" "$APP_ROOT/next_release"
            mv -Tf "$APP_ROOT/next_release" "$CURRENT_SYMLINK"

            echo "Verifying 'current' symlink target:"
            ls -l "$CURRENT_SYMLINK" || true

            echo "Reloading systemd daemon to pick up symlink changes..."
            sudo systemctl daemon-reload

            echo "Restarting service..."
            systemctl restart yt-downloader.service
            
            echo "Checking service status (wait a few seconds for it to start):"
            sleep 5
            systemctl status yt-downloader.service | head -n 3

            echo "Cleaning up old releases (keeping last 5, for example)..."
            ls -dt "$RELEASES_PATH"/* | tail -n +6 | xargs rm -rf -- {} || true

            echo "Cleaning up staging directory..."
            rm -rf "$LATEST_STAGING_PATH"

            echo "Deployment successful! Current version points to: $(readlink -f "$CURRENT_SYMLINK")"
            echo "--- End Debugging Deployment ---"
